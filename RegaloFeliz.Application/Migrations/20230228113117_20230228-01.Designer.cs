// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegaloFeliz.Application;

#nullable disable

namespace RegaloFeliz.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230228113117_20230228-01")]
    partial class _2023022801
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RegaloFeliz.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90d10994-3bdd-4ca2-a178-6a35fd653c59"),
                            Name = "God Of War"
                        },
                        new
                        {
                            Id = new Guid("6ebc3dbe-2e7b-4132-8c33-e089d47694cd"),
                            Name = "FIFA 2023"
                        });
                });

            modelBuilder.Entity("RegaloFeliz.Domain.Entities.ProductSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductSales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2d7c24a-73ca-4957-b4f9-345f635b03d3"),
                            Price = 100f,
                            ProductId = new Guid("90d10994-3bdd-4ca2-a178-6a35fd653c59"),
                            SaleId = new Guid("98474b8e-d713-401e-8aee-acb7353f97bb")
                        },
                        new
                        {
                            Id = new Guid("f01ed6d5-bba7-44f7-b28f-594aaf56b869"),
                            Price = 100f,
                            ProductId = new Guid("6ebc3dbe-2e7b-4132-8c33-e089d47694cd"),
                            SaleId = new Guid("98474b8e-d713-401e-8aee-acb7353f97bb")
                        });
                });

            modelBuilder.Entity("RegaloFeliz.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98474b8e-d713-401e-8aee-acb7353f97bb"),
                            ProductId = new Guid("90d10994-3bdd-4ca2-a178-6a35fd653c59"),
                            SaleDate = new DateTime(2023, 2, 18, 12, 31, 17, 245, DateTimeKind.Local).AddTicks(1852),
                            TotalAmount = 100f
                        },
                        new
                        {
                            Id = new Guid("bfe902af-3cf0-4a1c-8a83-66be60b028ba"),
                            ProductId = new Guid("90d10994-3bdd-4ca2-a178-6a35fd653c59"),
                            SaleDate = new DateTime(2023, 2, 8, 12, 31, 17, 245, DateTimeKind.Local).AddTicks(1907),
                            TotalAmount = 200f
                        },
                        new
                        {
                            Id = new Guid("150c81c6-2458-466e-907a-2df11325e2b8"),
                            ProductId = new Guid("6ebc3dbe-2e7b-4132-8c33-e089d47694cd"),
                            SaleDate = new DateTime(2023, 1, 29, 12, 31, 17, 245, DateTimeKind.Local).AddTicks(1912),
                            TotalAmount = 300f
                        });
                });

            modelBuilder.Entity("RegaloFeliz.Domain.Entities.Sale", b =>
                {
                    b.HasOne("RegaloFeliz.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RegaloFeliz.Domain.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
